getwd()
required.packages <- c("reshape2","ggplot2","WDI","data.table")
lapply(required.packages, require, character.only=T)
data <- read.csv("PL data.csv")
ext <- read.csv("povcal_out.csv")
Povcal.CPI <- read.csv("doc_cpi_list.csv")
#Download FAO food CPI and total CPI
temp_download <- tempfile()
download.file("http://fenixservices.fao.org/faostat/static/bulkdownloads/ConsumerPriceIndices_E_All_Data.zip",temp_download)
FAO.CPI <- read.csv(unz(temp_download,"ConsumerPriceIndices_E_All_Data_NOFLAG.csv"))
unlink(temp_download)
#Establish year range
data$Current.year <- as.character(data$Current.year)
data$Current.year.1 <- as.numeric(substr(data$Current.year,0,4))
data$Current.year.2 <- as.numeric(substr(data$Current.year,6,9))
start.year <- min(data$Current.year.1,na.rm=T)
end.year <- max(rbind(data$Current.year.1,data$Current.year.2),na.rm=T)
WDI.CPI <- WDI(indicator="FP.CPI.TOTL",start=start.year,end=end.year,extra=T)
WDI.ISO <- unique(WDI.CPI[,c(2,5)])
WDI.CPI <- WDI.CPI[,c(2,4,3)]
WDI.PPP <- WDI(indicator="PA.NUS.PRVT.PP",start=2011,end=2011)[,c(2,3)]
remap_cov = function(x){
cov_dict = c(
"R"=1,
"U"=2,
"N"=3,
"A"=NA
)
return(cov_dict[as.character(x)])
}
remap_cov = Vectorize(remap_cov)
ext$svy_code = remap_cov(ext$CoverageType)
ext = subset(ext,!is.na(svy_code))
ext$C0 = paste(ext$CountryCode,ext$svy_code,sep="_")
Povcal.PPP <- unique(ext[,c(35,11)])
WDI.ISO$iso3c[which(WDI.ISO$country=="North Macedonia")] <- "MKD"
#Replace old Povcal country codes with new and melt
Povcal.CPI$ISO[which(Povcal.CPI$ISO=="ZAR")] <- "COD"
Povcal.CPI$ISO[which(Povcal.CPI$ISO=="WBG")] <- "PSE"
Povcal.CPI$ISO[which(Povcal.CPI$ISO=="KSV")] <- "XKX"
Povcal.CPI$ISO[which(Povcal.CPI$ISO=="TMP")] <- "TLS"
Povcal.CPI <- merge(Povcal.CPI,WDI.ISO, by.x="ISO",by.y="iso3c")[,c(10,1,3,4,6,7,5,8,9)]
Povcal.CPI.melt <- melt(Povcal.CPI[,c(1,2,3,7,8,9)], id.vars = c(1,2,3))
Povcal.CPI.melt <- Povcal.CPI.melt[complete.cases(Povcal.CPI.melt),]
#Use national CPI for rural and urban Indonesia
Povcal.CPI.melt.IDN <- subset(Povcal.CPI.melt, country == "Indonesia")
Povcal.CPI.melt.IDN.R <- Povcal.CPI.melt.IDN
Povcal.CPI.melt.IDN.R$variable <- "R.CPI"
Povcal.CPI.melt.IDN.U <- Povcal.CPI.melt.IDN
Povcal.CPI.melt.IDN.U$variable <- "U.CPI"
Povcal.CPI.melt <- rbind(Povcal.CPI.melt,Povcal.CPI.melt.IDN.R,Povcal.CPI.melt.IDN.U)
#Align names to data
Povcal.CPI.melt$country.append <- ""
Povcal.CPI.melt$ISO.append <- "_3"
Povcal.CPI.melt$country.append[which(Povcal.CPI.melt$variable=="R.CPI")] <- "--Rural"
Povcal.CPI.melt$ISO.append[which(Povcal.CPI.melt$variable=="R.CPI")] <- "_1"
Povcal.CPI.melt$country.append[which(Povcal.CPI.melt$variable=="U.CPI")] <- "--Urban"
Povcal.CPI.melt$ISO.append[which(Povcal.CPI.melt$variable=="U.CPI")] <- "_2"
Povcal.CPI.melt$country <- paste0(Povcal.CPI.melt$country,Povcal.CPI.melt$country.append)
Povcal.CPI.melt$ISO <- paste0(Povcal.CPI.melt$ISO,Povcal.CPI.melt$ISO.append)
Povcal.CPI.melt <- Povcal.CPI.melt[,c(1,2,3,5)]
#Replace FAO country names with WB version where different
FAO.CPI$WB.country <- as.character(FAO.CPI$Area)
FAO.CPI$WB.country[which(FAO.CPI$Area=="Bahamas")] <- "Bahamas, The"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Bolivia (Plurinational State of)")] <- "Bolivia"
FAO.CPI$WB.country[which(FAO.CPI$Area=="China, mainland")] <- "China"
FAO.CPI$WB.country[which(FAO.CPI$Area=="China, Hong Kong SAR")] <- "Hong Kong SAR, China"
FAO.CPI$WB.country[which(FAO.CPI$Area=="China, Macao SAR")] <- "Macao SAR, China"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Congo")] <- "Congo, Rep."
FAO.CPI$WB.country[which(FAO.CPI$Area=="Democratic Republic of the Congo")] <- "Congo, Dem. Rep."
FAO.CPI$WB.country[which(FAO.CPI$Area=="CÃƒÂ´te d'Ivoire")] <- "Cote d'Ivoire"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Czechia")] <- "Czech Republic"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Egypt")] <- "Egypt, Arab Rep."
FAO.CPI$WB.country[which(FAO.CPI$Area=="Gambia")] <- "Gambia, The"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Iran (Islamic Republic of)")] <- "Iran, Islamic Rep."
FAO.CPI$WB.country[which(FAO.CPI$Area=="Kyrgyzstan")] <- "Kyrgyz Republic"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Lao People's Democratic Republic")] <- "Lao PDR"
FAO.CPI$WB.country[which(FAO.CPI$Area=="The former Yugoslav Republic of Macedonia")] <- "North Macedonia"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Occupied Palestinian Territory")] <- "West Bank and Gaza"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Republic of Korea")] <- "Korea, Rep."
FAO.CPI$WB.country[which(FAO.CPI$Area=="Republic of Moldova")] <- "Moldova"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Saint Kitts and Nevis")] <- "St. Kitts and Nevis"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Saint Lucia")] <- "St. Lucia"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Saint Vincent and the Grenadines")] <- "St. Vincent and the Grenadines"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Slovakia")] <- "Slovak Republic"
FAO.CPI$WB.country[which(FAO.CPI$Area=="United Republic of Tanzania")] <- "Tanzania"
FAO.CPI$WB.country[which(FAO.CPI$Area=="United States of America")] <- "United States"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Venezuela (Bolivarian Republic of)")] <- "Venezuela, RB"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Viet Nam")] <- "Vietnam"
FAO.CPI$WB.country[which(FAO.CPI$Area=="Yemen")] <- "Yemen, Rep."
#Melt FAO by country, year, indicator
FAO.CPI.melt <- melt(FAO.CPI,id.vars = c(1,2,3,4,5,6,7,27))
FAO.CPI.melt$variable <- as.numeric(substr(FAO.CPI.melt$variable,2,5))
FAO.CPI.melt <- FAO.CPI.melt[,c(8,4,6,9,10)]
#Calculate FAO mean indices by year
FAO.CPI.mean <- aggregate(FAO.CPI.melt, by = list(FAO.CPI.melt$WB.country,FAO.CPI.melt$Item,FAO.CPI.melt$variable), drop= T, FUN=mean, na.rm=T)
FAO.CPI.mean <- FAO.CPI.mean[,c(1,2,3,8)]
names(FAO.CPI.mean) <- c("country","indicator","year","value")
#Separate FCPI and CPI, merge WDI and rebase to 2011
FCPI <- subset(FAO.CPI.mean, indicator == "Consumer Prices, Food Indices (2010 = 100)")[,c(1,3,4)]
FCPI.2011 <- subset(FCPI,year==2011)
FCPI.2011 <- merge(FCPI,FCPI.2011,by=("country"),all.x=T)
FCPI.2011$value.2011 <- FCPI.2011$value.x/FCPI.2011$value.y
FCPI.2011 <- FCPI.2011[,c(1,2,6)]
CPI <- subset(FAO.CPI.mean, indicator == "Consumer Prices, General Indices (2010 = 100)")[,c(1,3,4)]
CPI <- merge(CPI, WDI.CPI,by=c("country","year"),all.y=T)
CPI.2011 <- subset(CPI,year==2011)
CPI.2011 <- merge(CPI,CPI.2011,by=("country"),all.x=T)
CPI.2011$FAO.value.2011 <- CPI.2011$value.x/CPI.2011$value.y
CPI.2011$WDI.value.2011 <- CPI.2011$FP.CPI.TOTL.x/CPI.2011$FP.CPI.TOTL.y
CPI.2011 <- CPI.2011[,c(1,2,8,9)]
#Merge indices with data
data <- merge(data,FCPI.2011, by.x=c("Country","Current.year.1"),by.y=c(1,2),all.x=T)
names(data)[10] <- "FCPI.1"
data <- merge(data,FCPI.2011, by.x=c("Country","Current.year.2"),by.y=c(1,2),all.x=T)
names(data)[11] <- "FCPI.2"
data <- merge(data,CPI.2011, by.x=c("Country","Current.year.1"),by.y=c(1,2),all.x=T)
names(data)[12] <- "FAO.CPI.1"
names(data)[13] <- "WDI.CPI.1"
data <- merge(data,CPI.2011, by.x=c("Country","Current.year.2"),by.y=c(1,2),all.x=T)
names(data)[14] <- "FAO.CPI.2"
names(data)[15] <- "WDI.CPI.2"
data <- merge(data, Povcal.CPI.melt, by.x=c("Country", "Povcal.code","Current.year.1"),by.y=c("country","ISO","Year"),all.x=T)
data <- merge(data, Povcal.CPI.melt, by.x=c("Country", "Povcal.code","Current.year.2"),by.y=c("country", "ISO","Year"),all.x=T)
names(data)[16] <- "Povcal.CPI.1"
names(data)[17] <- "Povcal.CPI.2"
data$Povcal.CPI.1 <- as.numeric(data$Povcal.CPI.1)
data$Povcal.CPI.2 <- as.numeric(data$Povcal.CPI.2)
#Average indicies across current years. Note that years missing data are not included in the average
data$FCPI.2011 <- rowMeans(cbind(data$FCPI.1,data$FCPI.2),na.rm=T)
data$FAO.CPI.2011 <- rowMeans(cbind(data$FAO.CPI.1,data$FAO.CPI.2),na.rm=T)
data$WDI.CPI.2011 <- rowMeans(cbind(data$WDI.CPI.1,data$WDI.CPI.2),na.rm=T)
data$Povcal.CPI.2011 <- rowMeans(cbind(data$Povcal.CPI.1,data$Povcal.CPI.2),na.rm=T)
data[is.na(data)] <- NA
data <- data[,c(1,2,5,8,6,7,9,18,19,20,21)]
#Merge PPP conversions
data <- merge(data,WDI.PPP, by.x="Country",by.y="country",all.x=T)
data <- merge(data,Povcal.PPP, by.x="Povcal.code",by.y="C0",all.x=T)
names(data)[12] <- "WDI.PPP.conversion"
names(data)[13] <- "Povcal.PPP.conversion"
PL <- data[,c(2,1,3,4)]
normalise.FPL.calories <- function(FPL,calories){
if(!is.na(calories)){
FPL.out <- FPL/calories*2100
} else {
FPL.out <- FPL
}
return(FPL.out)
}
normalise.NPL.calories <- function(NPL,FPL,calories){
if(!is.na(calories)){
NPL.excess <- NPL - FPL
FPL.cal <- FPL/calories*2100
NPL.out <- FPL.cal + NPL.excess
} else {
NPL.out <- NPL
}
return(NPL.out)
}
fcpi.deflate <- function(FPL,fcpi,povcal.cpi,WDI.cpi,FAO.cpi){
if(!is.na(fcpi)){
FPL.out <- FPL/fcpi
} else {
if(!is.na(povcal.cpi)){
FPL.out <- FPL/povcal.cpi
} else {
if(!is.na(WDI.cpi)){
FPL.out <- FPL/WDI.cpi
} else {
FPL.out <- FPL/FAO.cpi
}
}
}
return(FPL.out)
}
cpi.deflate <- function(PL,povcal.cpi,WDI.cpi,FAO.cpi){
if(!is.na(povcal.cpi)){
PL.out <- PL/povcal.cpi
} else {
if(!is.na(WDI.cpi)){
PL.out <- PL/WDI.cpi
} else {
PL.out <- PL/FAO.cpi
}
}
return(PL.out)
}
PPP.convert <- function(PL,povcal.PPP,WDI.PPP){
if(!is.na(povcal.PPP)){
PL.out <- PL/povcal.PPP
} else {
PL.out <- PL/WDI.PPP
}
return(PL.out)
}
i <- 1
for (i in 1:nrow(data)){
PL[i,5] <- normalise.FPL.calories(data[i,5],data[i,7])
PL[i,5] <- fcpi.deflate(PL[i,5],data[i,8],data[i,11],data[i,10],data[i,9])
PL[i,6] <- PPP.convert(PL[i,5],data[i,13],data[i,12])
PL[i,7] <- normalise.NPL.calories(data[i,6],data[i,5],data[i,7])
PL[i,7] <- cpi.deflate(PL[i,7],data[i,11],data[i,10],data[i,9])
PL[i,8] <- PPP.convert(PL[i,7],data[i,13],data[i,12])
}
names(PL)[5] <- "FPL.2011LCU"
names(PL)[6] <- "FPL.2011PPP"
names(PL)[7] <- "NPL.2011LCU"
names(PL)[8] <- "NPL.2011PPP"
FPL <- PL[,c(2,6)]
FPL <- FPL[complete.cases(FPL),]
write.csv(PL,"PLs.csv",row.names=F)
#Query Povcal with FPL(PPP) set as PL. There is a more efficient way of doing this (multiple countries and poverty lines per query)
povcal.out.PPP <- function(country,year="all",PL){
param <- paste0("RefYears=",year,"&PovertyLine=",PL,"&C0=",country)
url <- paste0("http://iresearch.worldbank.org/PovcalNet/PovcalNetAPI.ashx?",param,"&display=c")
return(read.csv(url,header=T))
}
i <- 1
FP.list <- list()
for (i in 1:nrow(FPL)){
FP.list[[i]] <- povcal.out.PPP(FPL[i,1],year="all",PL=FPL[i,2])
}
FP.povcal.PPP <- rbindlist(FP.list)
#Query Povcal with FPL(LCU) set as PPP. This gives equivalent results to above.
povcal.out.FPL <- function(country,year="all",PL=1,PPP){
param <- paste0("RefYears=",year,"&PovertyLine=",PL,"&C0=",country,"&PPP0=",PPP)
url <- paste0("http://iresearch.worldbank.org/PovcalNet/PovcalNetAPI.ashx?",param,"&display=c")
return(read.csv(url,header=T))
}
i <- 1
FP.list <- list()
for (i in 1:nrow(PL)){
FP.list[[i]] <- povcal.out.FPL(PL[i,2],year="all",PL=1,PL[i,5])
}
FP.povcal.FPL <- rbindlist(FP.list)
#Calculate national consumption floors based on food poverty lines, both in PPP dollar terms and FPL terms
FP.floors.PPP <- FP.povcal.PPP[,c(4,3,6,7,9,11,13,14,15)]
FP.floors.PPP[which(FP.floors.PPP$CoverageType=="R")]$CountryName <- paste0(FP.floors.PPP[which(FP.floors.PPP$CoverageType=="R")]$CountryName,"--Rural")
FP.floors.PPP[which(FP.floors.PPP$CoverageType=="U")]$CountryName <- paste0(FP.floors.PPP[which(FP.floors.PPP$CoverageType=="U")]$CountryName,"--Urban")
FP.floors.PPP$floor <- FP.floors.PPP$PovertyLine*(1-FP.floors.PPP$PovGapSqr/FP.floors.PPP$PovGap)
FP.floors.PPP <- FP.floors.PPP[,c(1,4,5,10)]
FP.floors.FPL <- FP.povcal.FPL[,c(4,3,6,7,9,11,13,14,15)]
FP.floors.FPL[which(FP.floors.FPL$CoverageType=="R")]$CountryName <- paste0(FP.floors.FPL[which(FP.floors.FPL$CoverageType=="R")]$CountryName,"--Rural")
FP.floors.FPL[which(FP.floors.FPL$CoverageType=="U")]$CountryName <- paste0(FP.floors.FPL[which(FP.floors.FPL$CoverageType=="U")]$CountryName,"--Urban")
FP.floors.FPL$floor <- FP.floors.FPL$PovertyLine*(1-FP.floors.FPL$PovGapSqr/FP.floors.FPL$PovGap)
FP.floors.FPL <- FP.floors.FPL[,c(1,4,5,10)]
FP.floors.FPL$floor.cal <- FP.floors.FPL$floor*2100
#Calculate kernel densities
FPL.kernel <- as.data.frame(cbind(density(PL$FPL.2011PPP, adjust=1, kernel="g", na.rm=T)$x, density(PL$FPL.2011PPP, adjust=1, kernel="g", na.rm=T)$y))
NPL.kernel <- as.data.frame(cbind(density(PL$NPL.2011PPP, adjust=1, kernel="g", na.rm=T)$x, density(PL$NPL.2011PPP, adjust=1, kernel="g", na.rm=T)$y))
Floor.FPL.kernel <- as.data.frame(cbind(density(FP.floors.FPL$floor.cal, adjust=1, kernel="g", na.rm=T)$x, density(FP.floors.FPL$floor.cal, adjust=1, kernel="g", na.rm=T)$y))
FPL.kernel.plot <- ggplot(subset(PL,Income.group != "High income")) +
geom_density(aes(FPL.2011PPP,col=Income.group,fill=Income.group,alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
ggsave("FPL.kernel.plot.png", FPL.kernel.plot)
NPL.kernel.plot <- ggplot(subset(PL,Income.group != "High income")) +
geom_density(aes(NPL.2011PPP,col=Income.group,fill=Income.group,alpha=I(0.5)),adjust=1,kernel="g", na.rm=T)
ggsave("NPL.kernel.plot.png", NPL.kernel.plot)
Floor.FPL.kernel.plot <- ggplot(subset(FP.floors.FPL,RequestYear==2015|RequestYear==1981)) +
geom_density(aes(floor.cal,col=as.character(RequestYear),fill=as.character(RequestYear),alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
ggsave("Floor.FPL.kernel.plot.png", FPL.floor.kernel.plot)
rm(FP.list,CPI,CPI.2011,FAO.CPI,FAO.CPI.mean,FAO.CPI.melt,FCPI,FCPI.2011,Povcal.CPI,Povcal.CPI.melt,Povcal.PPP,WDI.CPI,WDI.ISO,WDI.PPP,Povcal.CPI.melt.IDN,Povcal.CPI.melt.IDN.R,Povcal.CPI.melt.IDN.U)
ggsave("Floor.FPL.kernel.plot.png", Floor.FPL.kernel.plot)
Floor.FPL.kernel.plot
View(FP.floors.FPL)
ggplot(FP.floors.FPL) +
p <- ggplot(FP.floors.FPL)
p + geom_histogram(aes(floor.cal))
p + geom_histogram(aes(floor.cal),bins=15)
p + geom_histogram(aes(floor.cal,col="Black",fill="White"),bins=15)
p + geom_histogram(aes(floor.cal,col="black",fill="white"),bins=15)
p + geom_histogram(aes(floor.cal),bins=15)
p + geom_histogram(aes(floor.cal),bins=15) + geom_density(aes(floor.cal))
?geom_histogram
p + geom_histogram(aes(floor.cal),bins=15,value=..density..) + geom_density(aes(floor.cal))
p + geom_histogram(aes(floor.cal),bins=15,y=..density..) + geom_density(aes(floor.cal))
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal))
p + geom_histogram(aes(y=..density..,floor.cal,col="white"),bins=15) + geom_density(aes(floor.cal))
p + geom_histogram(aes(y=..density..,floor.cal,col="red"),bins=15) + geom_density(aes(floor.cal))
p + geom_histogram(aes(y=..density..,floor.cal,col="red",fill='white'),bins=15) + geom_density(aes(floor.cal))
white
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal))
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal))
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal),col='black')
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal),col='black',fill='red')
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal),col='black',fill='red',alpha=I(0.5))
p + geom_histogram(aes(y=..density..,floor.cal),bins=15) + geom_density(aes(floor.cal),col='red',fill='red',alpha=I(0.5))
p + geom_histogram(aes(y=..density..,floor.cal),bins=15,col='black',fill='white') + geom_density(aes(floor.cal),col='red',fill='red',alpha=I(0.5))
p + geom_histogram(aes(y=..density..,floor.cal),bins=15,col='black',fill='white') + geom_density(aes(floor.cal),col='red',fill='red',alpha=I(0.5),adjust=0.5)
p + geom_histogram(aes(y=..density..,floor.cal),bins=30,col='black',fill='white') + geom_density(aes(floor.cal),col='red',fill='red',alpha=I(0.5),adjust=0.5)
p + geom_histogram(aes(y=..density..,floor.cal),bins=30,col='black',fill='white') + geom_density(aes(floor.cal),col='red',fill='red',alpha=I(0.5),adjust=1)
p + geom_histogram(aes(y=..density..,floor.cal),bins=30,col='black',fill='white') + geom_density(aes(floor.cal),col='red',fill='red',alpha=I(0.5),adjust=2)
FPL.kernel.plot <- ggplot(subset(PL,Income.group != "High income")) +
geom_density(aes(FPL.2011PPP,col=Income.group,fill=Income.group,alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
required.packages <- c("reshape2","ggplot2","WDI","data.table")
lapply(required.packages, require, character.only=T)
FPL.kernel.plot <- ggplot(subset(PL,Income.group != "High income")) +
geom_density(aes(FPL.2011PPP,col=Income.group,fill=Income.group,alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
ggsave("FPL.kernel.plot.png", FPL.kernel.plot)
FPL.kernel.plot
ggsave("FPL.kernel.plot.png", FPL.kernel.plot)
Floor.FPL.kernel.plot <- ggplot(subset(FP.floors.FPL,RequestYear==2015|RequestYear==1981)) +
geom_density(aes(floor.cal,col=as.character(RequestYear),fill=as.character(RequestYear),alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
Floor.FPL.kernel.plot
ggsave("Floor.FPL.kernel.plot.png", Floor.FPL.kernel.plot)
View(FP.povcal.FPL)
View(FP.floors.FPL)
View(Floor.FPL.kernel)
View(FP.povcal.FPL)
FPL.kernel.plot
View(Floor.FPL.kernel)
View(FPL.kernel)
View(FPL)
median(FPL$FPL.2011PPP)
View(FP.floors.FPL)
Floor.FPL.kernel.plot <- ggplot(subset(FP.floors.FPL,RequestYear==2015)) +
geom_density(aes(floor.cal,col=as.character(RequestYear),fill=as.character(RequestYear),alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
Floor.FPL.kernel.plot <- ggplot(subset(FP.floors.FPL,RequestYear==2015|RequestYear==1981)) +
geom_density(aes(floor.cal,col=as.character(RequestYear),fill=as.character(RequestYear),alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
Floor.FPL.kernel.plot
Floor.FPL.kernel.plot <- ggplot(subset(FP.floors.FPL,RequestYear==2015)) +
geom_density(aes(floor.cal,col=as.character(RequestYear),fill=as.character(RequestYear),alpha=I(0.5)),adjust=1, kernel="g", na.rm=T)
Floor.FPL.kernel.plot
View(FP.povcal.FPL)
View(Floor.FPL.kernel)
Floor.FPL.kernel.2015 <- as.data.frame(cbind(density(subset(FP.floors.FPL$floor.cal,RequestYear==2015), adjust=1, kernel="g", na.rm=T)$x, density(subset(FP.floors.FPL$floor.cal,RequestYear==2015), adjust=1, kernel="g", na.rm=T)$y))
Floor.FPL.kernel.2015 <- as.data.frame(cbind(density(subset(FP.floors.FPL,RequestYear==2015)$floor.cal, adjust=1, kernel="g", na.rm=T)$x, density(subset(FP.floors.FPL,RequestYear==2015)$floor.cal, adjust=1, kernel="g", na.rm=T)$y))
Floor.FPL.kernel.1981 <- as.data.frame(cbind(density(subset(FP.floors.FPL,RequestYear==1981)$floor.cal, adjust=1, kernel="g", na.rm=T)$x, density(subset(FP.floors.FPL,RequestYear==1981)$floor.cal, adjust=1, kernel="g", na.rm=T)$y))
View(Floor.FPL.kernel)
View(Floor.FPL.kernel.1981)
View(Floor.FPL.kernel.2015)
View(FP.povcal.FPL)
FP.floors.FPL.agg <- FP.povcal.FPL[,c(6,7,14,15,21)]
FP.floors.FPL.agg$PovGap.Pop <- FP.floors.FPL.agg$PovGap*FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg$PovGapSqr.Pop <- FP.floors.FPL.agg$PovGapSqr*FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg <- aggregate(FP.floors.FPL.agg, by=list("RequestYear"))
View(FP.floors.FPL.agg)
FP.floors.FPL.agg <- FP.floors.FPL.agg[which(FP.floors.FPL.agg$CoverageType != "A")]
FP.floors.FPL.agg <- FP.floors.FPL.agg[which(as.character(FP.floors.FPL.agg$CoverageType) != "A")]
View(FP.floors.FPL)
FP.floors.FPL.agg <- aggregate(FP.floors.FPL.agg, by=list("RequestYear"),FUN=sum)
FP.floors.FPL.agg <- aggregate(FP.floors.FPL.agg, by=list(c("RequestYear")),FUN=sum)
FP.floors.FPL.agg <- FP.povcal.FPL[,c(7,14,15,21)]
#FP.floors.FPL.agg <- FP.floors.FPL.agg[which(FP.floors.FPL.agg$CoverageType != "A")]
FP.floors.FPL.agg$PovGap.Pop <- FP.floors.FPL.agg$PovGap*FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg$PovGapSqr.Pop <- FP.floors.FPL.agg$PovGapSqr*FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg <- FP.povcal.FPL[,c(6,7,14,15,21)]
#FP.floors.FPL.agg <- FP.floors.FPL.agg[which(FP.floors.FPL.agg$CoverageType != "A")]
FP.floors.FPL.agg$PovGap.Pop <- FP.floors.FPL.agg$PovGap*FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg$PovGapSqr.Pop <- FP.floors.FPL.agg$PovGapSqr*FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg[,c(1,5,6,7)]
FP.floors.FPL.agg <- FP.floors.FPL.agg[,c(2,5,6,7)]
FP.floors.FPL.agg <- aggregate(FP.floors.FPL.agg, by=list(FP.floors.FPL.agg$RequestYear),FUN=sum)
FP.floors.FPL.agg$PovGap <- FP.floors.FPL.agg$PovGap.Pop/FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg$PovGapSqr <- FP.floors.FPL.agg$PovGapSqr.Pop/FP.floors.FPL.agg$ReqYearPopulation
FP.floors.FPL.agg <- FP.floors.FPL.agg[,c(1,6,7)]
FP.floors.FPL.agg$floor <- 1-FP.floors.FPL.agg$PovGapSqr/FP.floors.FPL.agg$PovGap
FP.floors.FPL.agg$floor.cal <- FP.floors.FPL.agg$floor*2100
View(FP.floors.FPL)
View(FP.povcal.FPL)
